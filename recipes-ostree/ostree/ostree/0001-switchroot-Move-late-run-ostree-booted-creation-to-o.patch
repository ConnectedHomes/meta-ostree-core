From 2f152a1f3facea5bdbb453f741cd422f136c5094 Mon Sep 17 00:00:00 2001
From: Alex Kiernan <alex.kiernan@hivehome.com>
Date: Sat, 7 Jul 2018 21:35:35 +0000
Subject: [PATCH] switchroot: Move late /run/ostree-booted creation to
 ostree-system-generator

When ostree-prepare-root is pid 1, ostree-prepare-boot defers creation of
/run/ostree-booted, which we were doing in ostree-remount, but that's too
late if we need ostree-system-generator to bind /var. Move the creation
of the /run/ostree-booted marker to ostree-system-generator based on the
existence of the ostree= kernel command line argument (which matches the
condition that ostree-remount used).

Signed-off-by: Alex Kiernan <alex.kiernan@gmail.com>
---
 src/switchroot/ostree-prepare-root.c     |  2 +-
 src/switchroot/ostree-remount.c          | 10 ----------
 src/switchroot/ostree-system-generator.c | 16 ++++++++--------
 3 files changed, 9 insertions(+), 19 deletions(-)

diff --git a/src/switchroot/ostree-prepare-root.c b/src/switchroot/ostree-prepare-root.c
index 0131d24..9e08072 100644
--- a/src/switchroot/ostree-prepare-root.c
+++ b/src/switchroot/ostree-prepare-root.c
@@ -210,7 +210,7 @@ main(int argc, char *argv[])
 
 
   /* We only stamp /run now if we're running in an initramfs, i.e. we're
-   * not pid 1.  Otherwise it's handled later via ostree-remount.service.
+   * not pid 1.  Otherwise it's handled later via ostree-system-generator.
    * https://mail.gnome.org/archives/ostree-list/2018-March/msg00012.html
    */
   if (!running_as_pid1)
diff --git a/src/switchroot/ostree-remount.c b/src/switchroot/ostree-remount.c
index c3e39c0..3644a06 100644
--- a/src/switchroot/ostree-remount.c
+++ b/src/switchroot/ostree-remount.c
@@ -46,16 +46,6 @@ main(int argc, char *argv[])
   struct stat stbuf;
   int i;
 
-  /* See comments in ostree-prepare-root.c for this.
-   *
-   * This service is triggered via
-   * ConditionKernelCommandLine=ostree
-   * but it's a lot easier for various bits of userspace to check for
-   * a file versus parsing the kernel cmdline.  So let's ensure
-   * the stamp file is created here too.
-   */
-  touch_run_ostree ();
-
   /* The /sysroot mount needs to be private to avoid having a mount for e.g. /var/cache
    * also propagate to /sysroot/ostree/deploy/$stateroot/var/cache
    *
diff --git a/src/switchroot/ostree-system-generator.c b/src/switchroot/ostree-system-generator.c
index 799a310..df7f4c7 100644
--- a/src/switchroot/ostree-system-generator.c
+++ b/src/switchroot/ostree-system-generator.c
@@ -41,14 +41,6 @@ static const char *arg_dest_late = "/tmp";
 int
 main(int argc, char *argv[])
 {
-  /* Important: if this isn't an ostree-booted system, do nothing; people could
-   * have the package installed as a dependency for flatpak or whatever.
-   */
-  { struct stat stbuf;
-    if (fstatat (AT_FDCWD, "/run/ostree-booted", &stbuf, 0) < 0)
-      exit (EXIT_SUCCESS);
-  }
-
   /* We conflict with the magic ostree-mount-deployment-var file for ostree-prepare-root */
   { struct stat stbuf;
     if (fstatat (AT_FDCWD, INITRAMFS_MOUNT_VAR, &stbuf, 0) == 0)
@@ -71,6 +63,14 @@ main(int argc, char *argv[])
   if (!ostree_cmdline)
     errx (EXIT_FAILURE, "Failed to find ostree= kernel argument");
 
+  /* See comments in ostree-prepare-root.c for this.
+   *
+   * It's a lot easier for various bits of userspace to check for
+   * a file versus parsing the kernel cmdline.  So let's ensure
+   * the stamp file is created here too.
+   */
+  touch_run_ostree ();
+
   { g_autoptr(GError) local_error = NULL;
     if (!ostree_cmd__private__()->ostree_system_generator (ostree_cmdline, arg_dest, NULL, arg_dest_late, &local_error))
       errx (EXIT_FAILURE, "%s", local_error->message);
